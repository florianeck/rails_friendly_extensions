var search_data = {"index":{"searchIndex":["alphanumeric","arrayext","boolean","chars2remove","datentime","hashext","numbers","object","smartcurrency","classmethods","instancemethods","stringandmore","add_brs()","age_calc()","alpha_sum()","array_to_hash()","avg()","bold()","clear_html()","colorize()","count_for()","currency_to_db()","currency_to_view()","days_to_months()","de_2_int()","defla()","denumberize()","end_of_month()","even?()","except()","extract_data()","fdiv()","fill_with_sth()","first_of_month()","get_closest()","green()","included()","infla()","isec()","ital()","json_labels()","limit()","max()","min()","min_max()","month_array()","month_label()","month_name()","month_name_full()","months_between()","nan?()","nbsp()","new_from_params()","next()","next_month()","next_month()","numberize()","odd?()","ordered()","pink()","prev_month()","prev_months()","random_string()","red()","replace_entities()","replace_html()","seperate()","short_date()","smart_currency()","smart_currency?()","span()","stack()","sum()","sum_with_attribute()","this_month()","to_a()","to_boolean()","to_date()","to_datetime()","to_de()","to_de()","to_euro()","to_euro()","to_foldername()","to_glossar()","to_i()","to_i()","to_label()","to_model()","to_q()","to_real()","to_short_stamp()","to_sql()","to_sql()","to_structured_hash()","to_text()","to_time()","to_years()","to_zodiac()","uline()","year_letter()","yellow()","readme"],"longSearchIndex":["alphanumeric","arrayext","boolean","chars2remove","datentime","hashext","numbers","object","smartcurrency","smartcurrency::classmethods","smartcurrency::instancemethods","stringandmore","stringandmore#add_brs()","datentime#age_calc()","numbers#alpha_sum()","arrayext#array_to_hash()","arrayext#avg()","stringandmore#bold()","stringandmore#clear_html()","stringandmore#colorize()","arrayext#count_for()","smartcurrency::instancemethods#currency_to_db()","smartcurrency::instancemethods#currency_to_view()","numbers#days_to_months()","stringandmore#de_2_int()","numbers#defla()","stringandmore#denumberize()","datentime::end_of_month()","numbers#even?()","arrayext#except()","hashext#extract_data()","numbers#fdiv()","arrayext#fill_with_sth()","datentime#first_of_month()","numbers#get_closest()","stringandmore#green()","smartcurrency::included()","numbers#infla()","arrayext#isec()","stringandmore#ital()","arrayext#json_labels()","stringandmore#limit()","numbers#max()","numbers#min()","numbers#min_max()","datentime::month_array()","datentime#month_label()","datentime#month_name()","datentime#month_name_full()","datentime#months_between()","numbers#nan?()","stringandmore#nbsp()","datentime::new_from_params()","arrayext#next()","datentime::next_month()","datentime#next_month()","stringandmore#numberize()","numbers#odd?()","hashext#ordered()","stringandmore#pink()","datentime#prev_month()","datentime::prev_months()","stringandmore::random_string()","stringandmore#red()","stringandmore#replace_entities()","stringandmore#replace_html()","arrayext#seperate()","datentime#short_date()","smartcurrency::classmethods#smart_currency()","smartcurrency::classmethods#smart_currency?()","stringandmore#span()","arrayext#stack()","arrayext#sum()","arrayext#sum_with_attribute()","datentime::this_month()","stringandmore#to_a()","stringandmore#to_boolean()","stringandmore#to_date()","stringandmore#to_datetime()","datentime#to_de()","numbers#to_de()","numbers#to_euro()","object#to_euro()","stringandmore#to_foldername()","stringandmore#to_glossar()","boolean#to_i()","datentime#to_i()","stringandmore#to_label()","stringandmore#to_model()","numbers#to_q()","boolean#to_real()","datentime#to_short_stamp()","arrayext#to_sql()","datentime#to_sql()","arrayext#to_structured_hash()","arrayext#to_text()","numbers#to_time()","numbers#to_years()","datentime#to_zodiac()","stringandmore#uline()","alphanumeric::year_letter()","stringandmore#yellow()",""],"info":[["Alphanumeric","","Alphanumeric.html","",""],["ArrayExt","","ArrayExt.html","","<p>Add the methods to the Array Class\n"],["Boolean","","Boolean.html","","<p>Functions for True/FalseClass\n"],["Chars2Remove","","Chars2Remove.html","","<p>Lists of character replacements like ASCII and HTML entities\n"],["DateNTime","","DateNTime.html","","<p>Extend Date, DateTime and Time\n"],["HashExt","","HashExt.html","",""],["Numbers","","Numbers.html","","<p>Numeric Extensions\n"],["Object","","Object.html","",""],["SmartCurrency","","SmartCurrency.html","",""],["SmartCurrency::ClassMethods","","SmartCurrency/ClassMethods.html","",""],["SmartCurrency::InstanceMethods","","SmartCurrency/InstanceMethods.html","",""],["StringAndMore","","StringAndMore.html","",""],["add_brs","StringAndMore","StringAndMore.html#method-i-add_brs","()",""],["age_calc","DateNTime","DateNTime.html#method-i-age_calc","()","<p>Return the current age base on a birthdate which is self\n"],["alpha_sum","Numbers","Numbers.html#method-i-alpha_sum","(u,o)",""],["array_to_hash","ArrayExt","ArrayExt.html#method-i-array_to_hash","(init_val = 0)","<p>Generate a hash with the given array elements as keys and ‘init_value’ as\nvalue\n"],["avg","ArrayExt","ArrayExt.html#method-i-avg","(attribute = nil)","<p>Get avg. value from, either from numeric values or from values from a\nobject included in array\n"],["bold","StringAndMore","StringAndMore.html#method-i-bold","()","<p>HTML Styling\n\n<pre>as the function names say</pre>\n"],["clear_html","StringAndMore","StringAndMore.html#method-i-clear_html","(options = {})",""],["colorize","StringAndMore","StringAndMore.html#method-i-colorize","(color_code)","<p>colorization in console\n"],["count_for","ArrayExt","ArrayExt.html#method-i-count_for","(item)","<p>check the number of items included in the array\n"],["currency_to_db","SmartCurrency::InstanceMethods","SmartCurrency/InstanceMethods.html#method-i-currency_to_db","(string)",""],["currency_to_view","SmartCurrency::InstanceMethods","SmartCurrency/InstanceMethods.html#method-i-currency_to_view","(decimal)",""],["days_to_months","Numbers","Numbers.html#method-i-days_to_months","(options = {:s_days => \"Tage\", :s_months => \"Monate\", :s_sep => \"und\"})",""],["de_2_int","StringAndMore","StringAndMore.html#method-i-de_2_int","()",""],["defla","Numbers","Numbers.html#method-i-defla","(y=40,f=2)","<p>Deflate number, y = duration of years, f = percentage tested\n"],["denumberize","StringAndMore","StringAndMore.html#method-i-denumberize","(options = {})",""],["end_of_month","DateNTime","DateNTime.html#method-c-end_of_month","(date = Date.new(Time.now.year, Time.now.month))",""],["even?","Numbers","Numbers.html#method-i-even-3F","()",""],["except","ArrayExt","ArrayExt.html#method-i-except","(*args)","<p>like except for hash\n"],["extract_data","HashExt","HashExt.html#method-i-extract_data","(slice = nil, trigger = \"1\")","<p>useful function for extracting form data from serveral checkboxes which\nwill return a hash like: {:chk_1 …\n"],["fdiv","Numbers","Numbers.html#method-i-fdiv","(d)","<p>&gt; tested\n"],["fill_with_sth","ArrayExt","ArrayExt.html#method-i-fill_with_sth","(sth, size)","<p>Untested / deprecated functions below, should be moved somewhere else!\n\n<pre>Ignore these functions, there are ...</pre>\n"],["first_of_month","DateNTime","DateNTime.html#method-i-first_of_month","()","<p>first day of current month\n"],["get_closest","Numbers","Numbers.html#method-i-get_closest","(nrs = [], lim = :ceil)","<p>Prüfen, welche Zahl aus dem Array am nächsten an der aktuellen Dran ist\ntested\n"],["green","StringAndMore","StringAndMore.html#method-i-green","()",""],["included","SmartCurrency","SmartCurrency.html#method-c-included","(base)",""],["infla","Numbers","Numbers.html#method-i-infla","(y=40,f=2)","<p>Inflate number, y = duration of years, f = percentage tested\n"],["isec","ArrayExt","ArrayExt.html#method-i-isec","(b)","<p>Schnittmenge / Intersection zwischen 2 Arrays\n"],["ital","StringAndMore","StringAndMore.html#method-i-ital","()",""],["json_labels","ArrayExt","ArrayExt.html#method-i-json_labels","()","<p>Generiert einen JSON-String aus einem Array mit Werten\n"],["limit","StringAndMore","StringAndMore.html#method-i-limit","(l=20)",""],["max","Numbers","Numbers.html#method-i-max","(ref)","<p>tested\n"],["min","Numbers","Numbers.html#method-i-min","(ref)","<p>tested\n"],["min_max","Numbers","Numbers.html#method-i-min_max","(m1, m2)","<p>Wert zwischen den Grenzen, ansonsten ober-oder unterkante tested\n"],["month_array","DateNTime","DateNTime.html#method-c-month_array","(start_date, end_date)",""],["month_label","DateNTime","DateNTime.html#method-i-month_label","()",""],["month_name","DateNTime","DateNTime.html#method-i-month_name","()",""],["month_name_full","DateNTime","DateNTime.html#method-i-month_name_full","()",""],["months_between","DateNTime","DateNTime.html#method-i-months_between","(date2 = Time.now.to_date, options={:abs => true})",""],["nan?","Numbers","Numbers.html#method-i-nan-3F","()",""],["nbsp","StringAndMore","StringAndMore.html#method-i-nbsp","()",""],["new_from_params","DateNTime","DateNTime.html#method-c-new_from_params","(p)",""],["next","ArrayExt","ArrayExt.html#method-i-next","(val, options = {})","<p>return the item after the given val in array returns val if no item found\nor val is not included toggle …\n"],["next_month","DateNTime","DateNTime.html#method-c-next_month","()",""],["next_month","DateNTime","DateNTime.html#method-i-next_month","()","<p>return next month\n"],["numberize","StringAndMore","StringAndMore.html#method-i-numberize","(options = {})","<p>Numerische encription\n\n<pre>cool thing for simple encrypt and decrypt strings</pre>\n"],["odd?","Numbers","Numbers.html#method-i-odd-3F","()",""],["ordered","HashExt","HashExt.html#method-i-ordered","(by = 1)","<p>returns an array containing the hash values ordered either by hash key or\nhash value userful for building …\n"],["pink","StringAndMore","StringAndMore.html#method-i-pink","()",""],["prev_month","DateNTime","DateNTime.html#method-i-prev_month","()","<p>return previous month\n"],["prev_months","DateNTime","DateNTime.html#method-c-prev_months","(i=12)",""],["random_string","StringAndMore","StringAndMore.html#method-c-random_string","(l=12, mode = :all)","<p>Returns random String, for Passwords, Captachs etc.. could create :upcase,\n:downcase, :numbers or :all …\n"],["red","StringAndMore","StringAndMore.html#method-i-red","()",""],["replace_entities","StringAndMore","StringAndMore.html#method-i-replace_entities","(mode = :html)",""],["replace_html","StringAndMore","StringAndMore.html#method-i-replace_html","(from, to)",""],["seperate","ArrayExt","ArrayExt.html#method-i-seperate","(n = 8)","<p>break array into n arrays\n"],["short_date","DateNTime","DateNTime.html#method-i-short_date","()",""],["smart_currency","SmartCurrency::ClassMethods","SmartCurrency/ClassMethods.html#method-i-smart_currency","()",""],["smart_currency?","SmartCurrency::ClassMethods","SmartCurrency/ClassMethods.html#method-i-smart_currency-3F","()",""],["span","StringAndMore","StringAndMore.html#method-i-span","()",""],["stack","ArrayExt","ArrayExt.html#method-i-stack","(n = 4)","<p>[1,2,3,5,6,7].stack(2)\n\n<pre>will return [[1, 2], [3, 5], [6, 7]]</pre>\n"],["sum","ArrayExt","ArrayExt.html#method-i-sum","(identity = 0, &block)","<p>Use sum from Activesupport Sum is not a default in Ruby\n"],["sum_with_attribute","ArrayExt","ArrayExt.html#method-i-sum_with_attribute","(arg, opt =nil)","<p>Sum up an array of objects with given attirbute Attributes can be given as\nsymbol (:my_value will return …\n"],["this_month","DateNTime","DateNTime.html#method-c-this_month","()",""],["to_a","StringAndMore","StringAndMore.html#method-i-to_a","()",""],["to_boolean","StringAndMore","StringAndMore.html#method-i-to_boolean","()","<p>Extract boolean status from string\n"],["to_date","StringAndMore","StringAndMore.html#method-i-to_date","()","<p>Create string with german date format to Date\n"],["to_datetime","StringAndMore","StringAndMore.html#method-i-to_datetime","()",""],["to_de","DateNTime","DateNTime.html#method-i-to_de","(options = {})",""],["to_de","Numbers","Numbers.html#method-i-to_de","(label=nil)","<p>Convert Number to numeric german style without precision\n"],["to_euro","Numbers","Numbers.html#method-i-to_euro","(label = nil, options = {})","<p>Convert Number to numeric german style with precision\n"],["to_euro","Object","Object.html#method-i-to_euro","(options={})",""],["to_foldername","StringAndMore","StringAndMore.html#method-i-to_foldername","(sep = \"_\")",""],["to_glossar","StringAndMore","StringAndMore.html#method-i-to_glossar","(with = \"\", options = {:show_tooltip => false})",""],["to_i","Boolean","Boolean.html#method-i-to_i","()","<p>return integer if true/false\n"],["to_i","DateNTime","DateNTime.html#method-i-to_i","()",""],["to_label","StringAndMore","StringAndMore.html#method-i-to_label","(options = {:show_tooltip => false})",""],["to_model","StringAndMore","StringAndMore.html#method-i-to_model","()",""],["to_q","Numbers","Numbers.html#method-i-to_q","()","<p>Finanzmathematik, Zinsen und so\n"],["to_real","Boolean","Boolean.html#method-i-to_real","(t = \"ja\", f = \"nein\")","<p>return string if true/false\n"],["to_short_stamp","DateNTime","DateNTime.html#method-i-to_short_stamp","(options = {})",""],["to_sql","ArrayExt","ArrayExt.html#method-i-to_sql","()","<p>Prepare array for use with mysql IN operator\n"],["to_sql","DateNTime","DateNTime.html#method-i-to_sql","()",""],["to_structured_hash","ArrayExt","ArrayExt.html#method-i-to_structured_hash","(attribute)",""],["to_text","ArrayExt","ArrayExt.html#method-i-to_text","(sep = \"<br />\")",""],["to_time","Numbers","Numbers.html#method-i-to_time","(options = {})",""],["to_years","Numbers","Numbers.html#method-i-to_years","(options = {:s_years => \"Jahre\", :s_months => \"Monate\", :s_sep => \"und\"})","<p>Cals\n"],["to_zodiac","DateNTime","DateNTime.html#method-i-to_zodiac","()",""],["uline","StringAndMore","StringAndMore.html#method-i-uline","()",""],["year_letter","Alphanumeric","Alphanumeric.html#method-c-year_letter","(year=Time.now.year)",""],["yellow","StringAndMore","StringAndMore.html#method-i-yellow","()",""],["README","","README_rdoc.html","","<p># rails_friendly_extensions\n<p>[![Build\nStatus](travis-ci.org/florianeck/rails_friendly_extensions.png?branch=master)](https://travis-ci.org/florianeck/rails_friendly_extensions\n…\n"]]}}